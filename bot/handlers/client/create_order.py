from aiogram import types, Dispatcher, F, Router, Bot
from aiogram.fsm.context import FSMContext
from bot.states import OrderCreation
from bot.keyboards import static, inline
from database.repositories import OrderRepository
from services.notification import notify_drivers_about_order
from utils.formatters import format_order
from core.config import Config
import uuid
from database import SessionLocal
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.filters.callback_data import CallbackData
from typing import Optional
from database.models import Order
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.utils.deep_linking import create_start_link
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
router = Router()


async def create_order_start(message: types.Message, state: FSMContext):
    await state.set_state(OrderCreation.START_POINT)
    await message.answer(
        "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ—á–∫–∞ –ê):",
        reply_markup=static.get_cancel_kb()
    )


async def process_start_point(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data = data or {}
    data['start_point'] = message.text
    await state.set_data(data) # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ

    await state.set_state(OrderCreation.END_POINT)
    await message.answer("üèÅ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—Ç–æ—á–∫–∞ –ë):")


async def process_end_point(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data = data or {}
    data['end_point'] = message.text
    await state.set_data(data) # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ

    await state.set_state(OrderCreation.TIME)
    await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")


async def process_time(message: types.Message, state: FSMContext):
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    if not message.text.replace(':', '').isdigit() or len(message.text) != 5:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 14:30)")
        return

    data = await state.get_data()
    data = data or {}
    data['time'] = message.text
    await state.set_data(data) # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ

    await state.set_state(OrderCreation.PRICE)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (—Ä—É–±):")


async def process_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    data = await state.get_data()
    data = data or {}
    data['price'] = price
    await state.set_data(data) # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ

    await state.set_state(OrderCreation.CONFIRM)
    await message.answer(
        format_order(data),
        reply_markup=inline.get_order_confirmation_kb()
    )


@router.callback_query(lambda c: c.data == "order_confirm", OrderCreation.CONFIRM)
async def confirm_order(callback: types.CallbackQuery, state: FSMContext, bot: Bot): # –ò–∑–º–µ–Ω–µ–Ω–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞, —É–±—Ä–∞–Ω order_repo
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    session = SessionLocal() # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —è–≤–Ω–æ
    try:
        order_repo = OrderRepository(session)

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Order
        order_data = {
            'id': str(uuid.uuid4()), # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è id
            'client_id': callback.from_user.id,
            'start_point': data.get('start_point'),
            'end_point': data.get('end_point'),
            'price': data.get('price'),
            'time': data.get('time'),
            'status': 'active'
        }
        order = Order(**order_data) # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Order –Ω–∞–ø—Ä—è–º—É—é
        order_repo.session.add(order) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–µ—Å—Å–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        order_repo.session.commit() # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        order_repo.session.refresh(order) # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω –∫ —Å–µ—Å—Å–∏–∏

    finally:
        session.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –±–ª–æ–∫–µ finally

    await callback.message.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    await state.clear()

    # –£–¥–∞–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    await notify_drivers_about_order(order.id, bot) # –ü–µ—Ä–µ–¥–∞–µ–º bot

    await callback.message.answer(
        "‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π",
        reply_markup=static.get_main_kb(callback.from_user.id)
    )
    await callback.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")


router.message.register(process_start_point, OrderCreation.START_POINT)
router.message.register(process_end_point, OrderCreation.END_POINT)
router.message.register(process_time, OrderCreation.TIME)
router.message.register(process_price, OrderCreation.PRICE)