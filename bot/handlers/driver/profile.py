from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from bot.states import DriverRegistration
from database import SessionLocal
from database.repositories import UserRepository
from bot.keyboards import static
from core.config import Config

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
router = Router()


async def start_registration(message: types.Message):
    await message.bot.send_message(
        message.from_user.id,
        "üöó –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        reply_markup=static.get_cancel_kb()
    )
    await message.delete()  # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await DriverRegistration.CAR_MODEL.set()


async def process_car_model(message: types.Message, state: FSMContext):
    await state.update_data(car_model=message.text)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await DriverRegistration.CAR_NUMBER.set()


async def process_car_number(message: types.Message, state: FSMContext):
    await state.update_data(car_number=message.text)
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è:")
    await DriverRegistration.LICENSE_PHOTO.set()


async def process_license_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ (–Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)
    await state.update_data(license_photo=message.photo[-1].file_id)
    await message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É?",
        reply_markup=static.get_confirmation_kb()
    )
    await DriverRegistration.CONFIRM.set()


async def confirm_registration(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    with SessionLocal() as session:
        user_repo = UserRepository(session)
        user = user_repo.update_user(callback.from_user.id, {
            'car_model': data.get('car_model', ''),
            'car_number': data.get('car_number', ''),
            'license_photo': data.get('license_photo', ''),
            'user_type': 'driver'
        })

    await state.clear()
    await callback.message.answer(
        "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=static.get_main_kb(callback.from_user.id)
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in Config.ADMIN_IDS:
        try:
            await callback.bot.send_message(
                admin_id,
                f"‚ö†Ô∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è!\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username if user.username else '–Ω–µ—Ç'} ({user.full_name})\n"
                f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {user.car_model} {user.car_number}"
            )
        except Exception as e:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            pass


def register_handlers(router_instance: Router):
    router_instance.message.register(start_registration, lambda message: message.text == "üöñ –°—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º", lambda message: message.state == None)
    router_instance.message.register(process_car_model, DriverRegistration.CAR_MODEL)
    router_instance.message.register(process_car_number, DriverRegistration.CAR_NUMBER)
    router_instance.message.register(process_license_photo, DriverRegistration.LICENSE_PHOTO)
    router_instance.callback_query.register(confirm_registration, lambda callback_query: callback_query.data == "confirm", DriverRegistration.CONFIRM)