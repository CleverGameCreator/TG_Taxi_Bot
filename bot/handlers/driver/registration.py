
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from bot.states import DriverRegistration
from database import SessionLocal
from database.repositories import UserRepository
from bot.keyboards import static
from core.config import Config
from aiogram.types import CallbackQuery

router = Router()


async def start_registration(message: types.Message, state: FSMContext):
    await state.set_state(DriverRegistration.CAR_MODEL)
    await message.answer(
        "üöó –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        reply_markup=static.get_cancel_kb()
    )


async def process_car_model(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data = data or {}
    data['car_model'] = message.text
    await state.set_data(data)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await state.set_state(DriverRegistration.CAR_NUMBER)


async def process_car_number(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data = data or {}
    data['car_number'] = message.text
    await state.set_data(data)
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è:")
    await state.set_state(DriverRegistration.LICENSE_PHOTO)


async def process_license_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        return

    data = await state.get_data()
    data = data or {}
    data['license_photo'] = message.photo[-1].file_id
    await state.set_data(data)
    await message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É?",
        reply_markup=static.get_driver_registration_confirmation_kb()
    )
    await state.set_state(DriverRegistration.CONFIRM)


@router.callback_query(lambda c: c.data == "driver_registration_confirm", DriverRegistration.CONFIRM)
async def confirm_registration(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    with SessionLocal() as session:
        user_repo = UserRepository(session)
        user = user_repo.update_user(callback.from_user.id, {
            'car_model': data.get('car_model', ''),
            'car_number': data.get('car_number', ''),
            'license_photo': data.get('license_photo', ''),
            'user_type': 'driver'
        })

    await state.clear()
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=static.get_main_kb(callback.from_user.id)
    )

    for admin_id in Config.ADMIN_IDS:
        try:
            await callback.bot.send_message(
                admin_id,
                f"‚ö†Ô∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è!\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username if user.username else '–Ω–µ—Ç'} ({user.full_name})\n"
                f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {user.car_model} {user.car_number}"
            )
        except Exception as e:
            pass
    await callback.answer("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router.message.register(process_car_model, DriverRegistration.CAR_MODEL)
router.message.register(process_car_number, DriverRegistration.CAR_NUMBER)
router.message.register(process_license_photo, DriverRegistration.LICENSE_PHOTO)
router.callback_query.register(confirm_registration, lambda c: c.data == "driver_registration_confirm", DriverRegistration.CONFIRM) 