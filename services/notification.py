from aiogram import Bot
from database import SessionLocal
from database.repositories import OrderRepository, UserRepository
from utils.formatters import format_order_for_driver
from core.config import Config
import logging
from bot.keyboards.inline import auction

logger = logging.getLogger(__name__)


async def notify_drivers_about_order(order_id: str, bot: Bot):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    with SessionLocal() as session:
        user_repo = UserRepository(session)
        order_repo = OrderRepository(session)

        try:
            order = order_repo.get_order(order_id)
            if not order:
                logger.error(f"Order {order_id} not found for notification")
                return

            drivers = user_repo.get_verified_drivers()

            for driver in drivers:
                try:
                    await bot.send_message(
                        driver.telegram_id,
                        format_order_for_driver(order),
                        reply_markup=auction.get_bid_kb(order_id)
                    )
                except Exception as e:
                    logger.error(f"Error notifying driver {driver.telegram_id}: {e}")
        except Exception as e:
            logger.error(f"Error in notify_drivers_about_order: {e}")


async def notify_auction_expired(order_id: str, bot: Bot):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ (—Å —è–≤–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º bot)"""
    with SessionLocal() as session:
        order_repo = OrderRepository(session)
        user_repo = UserRepository(session)

        try:
            order = order_repo.get_order(order_id)
            if not order:
                logger.warning(f"Order {order_id} not found for expiration notification")
                return

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            try:
                await bot.send_message(
                    order.client.telegram_id,
                    f"‚è≥ –ê—É–∫—Ü–∏–æ–Ω –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è"
                )
            except Exception as e:
                logger.error(f"Error notifying client: {e}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π, —É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏—Ö –≤ –∞—É–∫—Ü–∏–æ–Ω–µ
            driver_ids = {bid.driver_id for bid in order.bids}
            for driver_id in driver_ids:
                try:
                    await bot.send_message(
                        driver_id,
                        f"‚è≥ –ê—É–∫—Ü–∏–æ–Ω –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω, –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω"
                    )
                except Exception as e:
                    logger.error(f"Error notifying driver {driver_id}: {e}")
        except Exception as e:
            logger.error(f"Error in notify_auction_expired: {e}")


async def notify_order_accepted(order_id: str, bot: Bot):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞"""
    with SessionLocal() as session:
        order_repo = OrderRepository(session)

        try:
            order = order_repo.get_order(order_id)
            if not order:
                logger.warning(f"Order {order_id} not found for acceptance notification")
                return

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            try:
                await bot.send_message(
                    order.client.telegram_id,
                    f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–º!\n"
                    f"üöó –í–æ–¥–∏—Ç–µ–ª—å: {order.driver.full_name}\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: @{order.driver.username if order.driver.username else '–Ω–µ—Ç'}"
                )
            except Exception as e:
                logger.error(f"Error notifying client: {e}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
            try:
                await bot.send_message(
                    order.driver.telegram_id,
                    f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ #{order_id}!\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client.full_name}\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: @{order.client.username if order.client.username else '–Ω–µ—Ç'}\n"
                    f"üìç –ú–∞—Ä—à—Ä—É—Ç: {order.start_point} ‚Üí {order.end_point}"
                )
            except Exception as e:
                logger.error(f"Error notifying driver: {e}")
        except Exception as e:
            logger.error(f"Error in notify_order_accepted: {e}")